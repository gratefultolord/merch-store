// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/gratefultolord/merch-store/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// ItemRepo is an autogenerated mock type for the ItemRepo type
type ItemRepo struct {
	mock.Mock
}

// GetAll provides a mock function with given fields: ctx
func (_m *ItemRepo) GetAll(ctx context.Context) ([]models.Item, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []models.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.Item, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.Item); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Item)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetItemByName provides a mock function with given fields: ctx, name
func (_m *ItemRepo) GetItemByName(ctx context.Context, name string) (*models.Item, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetItemByName")
	}

	var r0 *models.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Item, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Item); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Item)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewItemRepo creates a new instance of ItemRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewItemRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *ItemRepo {
	mock := &ItemRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
