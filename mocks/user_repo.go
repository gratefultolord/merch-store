// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/gratefultolord/merch-store/internal/models"
	mock "github.com/stretchr/testify/mock"

	sqlx "github.com/jmoiron/sqlx"
)

// UserRepo is an autogenerated mock type for the UserRepo type
type UserRepo struct {
	mock.Mock
}

// AddOrIncrementItemInventory provides a mock function with given fields: ctx, tx, userID, itemID, quantity
func (_m *UserRepo) AddOrIncrementItemInventory(ctx context.Context, tx *sqlx.Tx, userID int, itemID int, quantity int) error {
	ret := _m.Called(ctx, tx, userID, itemID, quantity)

	if len(ret) == 0 {
		panic("no return value specified for AddOrIncrementItemInventory")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.Tx, int, int, int) error); ok {
		r0 = rf(ctx, tx, userID, itemID, quantity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddToInventory provides a mock function with given fields: ctx, tx, userID, itemID, quantity
func (_m *UserRepo) AddToInventory(ctx context.Context, tx *sqlx.Tx, userID int, itemID int, quantity int) error {
	ret := _m.Called(ctx, tx, userID, itemID, quantity)

	if len(ret) == 0 {
		panic("no return value specified for AddToInventory")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.Tx, int, int, int) error); ok {
		r0 = rf(ctx, tx, userID, itemID, quantity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CheckInventory provides a mock function with given fields: ctx, tx, userID, itemID, existingQuantity
func (_m *UserRepo) CheckInventory(ctx context.Context, tx *sqlx.Tx, userID int, itemID int, existingQuantity *int) error {
	ret := _m.Called(ctx, tx, userID, itemID, existingQuantity)

	if len(ret) == 0 {
		panic("no return value specified for CheckInventory")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.Tx, int, int, *int) error); ok {
		r0 = rf(ctx, tx, userID, itemID, existingQuantity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: ctx, user
func (_m *UserRepo) Create(ctx context.Context, user *models.User) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: ctx, userID
func (_m *UserRepo) GetByID(ctx context.Context, userID int) (*models.User, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*models.User, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *models.User); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUsername provides a mock function with given fields: ctx, username
func (_m *UserRepo) GetByUsername(ctx context.Context, username string) (*models.User, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for GetByUsername")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.User, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.User); ok {
		r0 = rf(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsernameByID provides a mock function with given fields: ctx, userID
func (_m *UserRepo) GetUsernameByID(ctx context.Context, userID int) (string, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUsernameByID")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (string, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) string); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBalance provides a mock function with given fields: ctx, tx, userID, amount
func (_m *UserRepo) UpdateBalance(ctx context.Context, tx *sqlx.Tx, userID int, amount int) error {
	ret := _m.Called(ctx, tx, userID, amount)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBalance")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.Tx, int, int) error); ok {
		r0 = rf(ctx, tx, userID, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateInventory provides a mock function with given fields: ctx, tx, userID, inventory
func (_m *UserRepo) UpdateInventory(ctx context.Context, tx *sqlx.Tx, userID int, inventory []models.UserInventoryItem) error {
	ret := _m.Called(ctx, tx, userID, inventory)

	if len(ret) == 0 {
		panic("no return value specified for UpdateInventory")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.Tx, int, []models.UserInventoryItem) error); ok {
		r0 = rf(ctx, tx, userID, inventory)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateInventoryQuantity provides a mock function with given fields: ctx, tx, userID, itemID, newQuantity
func (_m *UserRepo) UpdateInventoryQuantity(ctx context.Context, tx *sqlx.Tx, userID int, itemID int, newQuantity int) error {
	ret := _m.Called(ctx, tx, userID, itemID, newQuantity)

	if len(ret) == 0 {
		panic("no return value specified for UpdateInventoryQuantity")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.Tx, int, int, int) error); ok {
		r0 = rf(ctx, tx, userID, itemID, newQuantity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserRepo creates a new instance of UserRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepo {
	mock := &UserRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
